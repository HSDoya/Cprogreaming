//PlayerInpuet
[SerializeField] float _Speed = 5f;
    [SerializeField] Camera _Camera;
    [SerializeField] private GameObject bullet;
    [SerializeField] private Transform bulletDirection;
    [SerializeField] private Transform bulletRightDirection;
    [SerializeField] private Transform bulletLeftDirection;
    [SerializeField] private GameObject wall; // 벽 
    [SerializeField] private Transform wallDirection; // 벽 위치 
    private bool canShoot = true;
    
   
    

    PlayerInput _Input;
    Vector2 _Movement;
    Vector2 _MousePos;

    private Camera main;


    Rigidbody2D _Rigidbody;

    private void Awake()
    {
        _Input = new PlayerInput();
        _Rigidbody = GetComponent<Rigidbody2D>();
    }

    private void OnEnable()
    {
        _Input.Enable();

        _Input.Control.Movement.performed += OnMovement;
        _Input.Control.Movement.canceled += OnMovement;

        _Input.Control.MousePoint.performed += OnMousePos;


    }
   

    private void OnDisable()
    {
        _Input.Control.Movement.performed -= OnMovement;
        _Input.Control.Movement.canceled -= OnMovement;
        _Input.Control.MousePoint.performed -= OnMousePos;

        _Input.Disable();
    }


    private void OnMovement(InputAction.CallbackContext context)
    {
        _Movement = context.ReadValue<Vector2>();
    }

    private void OnMousePos(InputAction.CallbackContext context)
    {
        _MousePos = _Camera.ScreenToWorldPoint(context.ReadValue<Vector2>());
    }

    void Start()
    {
        main = Camera.main;
        _Input.Control.Shoot.performed += _ => PlayerShoot();
        _Input.Control.Wall.performed += _ => CreateWall(); //추가코드(벽) 
    }


    private void CreateWall() // 추가 코드-> 벽 추가 
    {
        if (CountWall.shelid == 0)
            return;
        else
        {
            Vector2 mousePosition = _Input.Control.MousePoint.ReadValue<Vector2>();
            mousePosition = Camera.main.ScreenToWorldPoint(mousePosition);
            GameObject W = Instantiate(wall, wallDirection.position, wallDirection.rotation);
            CountWall.shelid -= 1;
        }
    }
    private void PlayerShoot()
    {
        if (!canShoot) return;

        Vector2 mousePosition = _Input.Control.MousePoint.ReadValue<Vector2>();
        mousePosition = Camera.main.ScreenToWorldPoint(mousePosition);
        if (Powerup.bullet_level%2 == 1) 
        {
            GameObject g = Instantiate(bullet, bulletDirection.position, bulletDirection.rotation);
            g.SetActive(true);
        }
        if(Powerup.bullet_level > 1)
        {
            GameObject g_l = Instantiate(bullet, bulletRightDirection.position , bulletDirection.rotation);
            g_l.SetActive(true);

            GameObject g_r = Instantiate(bullet, bulletLeftDirection.position , bulletDirection.rotation);
            g_r.SetActive(true);
        }
        
        StartCoroutine(CanShoot());
    }

    IEnumerator CanShoot()
    {
        canShoot = false;
        yield return new WaitForSeconds(.5f);
        canShoot = true;
    }

  
    void Update()
    {
        Vector2 mouseScreenPosition = _Input.Control.MousePoint.ReadValue<Vector2>();
        Vector3 mouseWorldPosition = main.ScreenToWorldPoint(mouseScreenPosition);
        Vector3 targetDirection = mouseWorldPosition - transform.position;
        float angle = Mathf.Atan2(targetDirection.y, targetDirection.x) * Mathf.Rad2Deg - 90f;
        _Rigidbody.MoveRotation(angle); ;
        transform.rotation = Quaternion.Euler(new Vector3(0f, 0f, angle));
    }

    private void FixedUpdate()
    {
        _Rigidbody.velocity = (_Movement * _Speed);
    }
    void OnCollisionEnter2D(Collision2D collision) // 오브젝트 충돌시 player랑 enemy 동시 파괴 
    {
        
       if (collision.gameObject.tag == "Enemy")
        {
            Destroy(collision.gameObject);
            Destroy(gameObject);
            Debug.Log("동시 파괴");

        }
    }
        
        
        
  // bullet code
 [SerializeField]
 private float speed = 4f;

    void OnCollisionEnter2D(Collision2D collision) // 오브젝트 충돌시 bullet 삭제 
    {
        if (collision.gameObject.tag == "BulletWall")
        {
            Destroy(gameObject);
        }
    }
    private

    void Awake() // 시간이 지나면 총알 삭제 
    {
        
        Destroy(gameObject, 5.0f);

    }
    void Start()
    {
       
    }
    
    // Update is called once per frame
    void Update()
    {
        transform.Translate(Vector3.up * speed * Time.deltaTime); 
    }

//wall
  private SpriteRenderer spriteRenderer;
    private void Awake()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
        Destroy(gameObject, 3.0f); // 3초뒤에 자동 삭제 

    }
    private void OnTriggerEnter2D(Collider2D collider) // 오브젝트끼리 충돌시 삭제 
    {
        Destroy(collider.gameObject); 
        
    }  



